name: build engine for pi4

on:
  push:
    tags:
      - '**'
  pull_request:
    branches: [ ci ]
  repository_dispatch:
  workflow_dispatch:
  workflow_call:
  
jobs:
  populate-engine-src-cache:
    name: 'Prepopulate engine source cache'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      
      - run: |
          echo github.ref: ${{ github.ref }}

      - name: Read stable engine version
        id: engine-version-stable

        # Read the engine.version.stable file and trim away anything that's not a hex digit
        # (So we don't include whitespace in the output variable, if that's possible)
        run: echo "hash=$(cat engine.version.stable | tr -dc [:xdigit:])" >> $GITHUB_OUTPUT
      
      - name: Log stable engine version
        run: |
          echo stable engine version: "${{ steps.engine-version-stable.outputs.hash }}"
      
      - name: Create engine cache stamp dir
        shell: bash
        run: |
          mkdir -p engine-cache-stamp

      - uses: actions/cache@v3
        id: stamp-cache
        with:
          path: engine-cache-stamp
          key: engine-cache-stamp-${{ steps.engine-version-stable.outputs.hash }}

      - name: Log cache hit
        shell: bash
        run: |
          echo cache hit? ${{ steps.stamp-cache.outputs.cache-hit }}

      - uses: actions/cache@v3
        id: cache
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        with:
          path: engine
          key: engine-${{ steps.engine-version-stable.outputs.hash }}

      - name: Setup environment variables
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          # echo DEPOT_TOOLS_UPDATE=0 >> $GITHUB_ENV
          echo GCLIENT_PY3=1 >> $GITHUB_ENV
          echo $PATH
          
      - name: Clone depot tools
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git $GITHUB_WORKSPACE/depot_tools
          echo $GITHUB_WORKSPACE/depot_tools >> $GITHUB_PATH
      
      - name: Setup environment variables
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          # echo DEPOT_TOOLS_UPDATE=0 >> $GITHUB_ENV
          echo GCLIENT_PY3=1 >> $GITHUB_ENV
          echo $PATH
          echo is-host: ${{ inputs.is-host }}
          
      - name: Setup gclient
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          gclient --version
          echo DEPOT_TOOLS_UPDATE=0 >> $GITHUB_ENV
      
      - name: Check if engine has dead libcxx repo
        id: check-dead-libcxx-repo
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          echo "::group::Downloading DEPS file"
          wget https://raw.githubusercontent.com/flutter/engine/${{ steps.engine-version-stable.outputs.hash }}/DEPS
          echo "::endgroup::"
          
          echo "::group::DEPS file contents"
          cat ./DEPS
          echo "::endgroup::"

          echo '::echo::on'
          if grep -F "7524ef50093a376f334a62a7e5cebf5d238d4c99" ./DEPS
          then
            echo '::set-output name=dead-libcxx-repo::true'
          else
            echo '::set-output name=dead-libcxx-repo::false'
          fi
          echo '::echo::off'

          rm ./DEPS

      - name: Bootstrap engine environment
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' && steps.check-dead-libcxx-repo.outputs.dead-libcxx-repo == 'false' }}
        shell: bash
        run: |
          mkdir -p engine
          cp dot-gclient.py engine/.gclient
          
      - name: Bootstrap engine environment (with dead libcxx repo workaround)
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' && steps.check-dead-libcxx-repo.outputs.dead-libcxx-repo == 'true' }}
        shell: bash
        run: |
          mkdir -p engine
          cp dot-gclient-fixed.py engine/.gclient
          
      - name: Install engine sources
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        working-directory: engine
        run: |
          gclient sync --revision src/flutter@${{ steps.engine-version-stable.outputs.hash }} -R -D
      
      - name: Install linux arm sysroot
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        working-directory: engine
        run: |
          ./src/build/linux/sysroot_scripts/install-sysroot.py --arch=arm

      - name: Prune git history
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        working-directory: engine
        run: |
          for FILE in $(find . -type d -name .git)
          do
            pushd "$FILE/.."
            git rev-parse HEAD > .git/shallow
            git tag -d $(git tag -l) || true
            for ref in $(git for-each-ref --format="%(refname)")
            do
              git update-ref -d "$ref"
            done
            git remote remove origin
            git reflog expire --expire=all --all
            git gc --prune=all
            popd
          done
          
  build-engine:
    name: 'build engine'
    runs-on: ubuntu-latest
    needs: populate-engine-src-cache
    strategy:
      matrix:
        artifact-name:
          - pi4
          - pi4-64
          - armv7-generic
          - aarch64-generic
        flavor:
          - debugdebug
          - debug
          - profile
          - release
        include:
          # debugdebug is a debug build with -O0 and -ggdb
          - flavor: debugdebug
            runtime-mode: debug
            unoptimized-nostripped: true
            has-gen-snapshot: false
          
          - flavor: debug
            runtime-mode: debug
            unoptimized-nostripped: false
            has-gen-snapshot: false
          
          - flavor: profile
            runtime-mode: profile
            unoptimized-nostripped: false
            has-gen-snapshot: true
          
          - flavor: release
            runtime-mode: release
            unoptimized-nostripped: false
            has-gen-snapshot: true
            
          # Pi 4 is a Cortex-A72, but doesn't support cryptography instructions.
          # Use -mcpu=cortex-a72+nocrypto -mtune=cortex-a72
          - artifact-name: pi4
            cpu: arm
            arm-cpu: cortex-a72+nocrypto
            arm-tune: cortex-a72

          - artifact-name: pi4-64
            cpu: arm64
            arm-cpu: cortex-a72+nocrypto
            arm-tune: cortex-a72
          
          # Use -mcpu=generic -mtune=generic for the generic builds.
          - artifact-name: armv7-generic
            cpu: arm
            arm-cpu: generic
            arm-tune: generic
            
          - artifact-name: aarch64-generic
            cpu: arm64
            arm-cpu: generic
            arm-tune: generic
          
    steps:
      - uses: actions/checkout@v3
      
      - name: Read stable engine version
        id: engine-version-stable
        run: echo "hash=$(cat engine.version.stable | tr -dc [:xdigit:])" >> $GITHUB_OUTPUT

      - name: Log engine version
        run: |
          echo *** engine version: ***
          echo ${{ steps.engine-version-stable.outputs.hash }}
      
      - name: Build engine
        uses: ./.github/actions/build-engine
        if: ${{ matrix.unoptimized-nostripped == false }}
        with:
          ref: "${{ steps.engine-version-stable.outputs.hash  }}"
          is-host: false
          runtime-mode: ${{ matrix.runtime-mode }}
          os: linux
          cpu: ${{ matrix.cpu }}
          additional-gn-args: '--embedder-for-target --disable-desktop-embeddings --no-build-glfw-shell --no-build-embedder-examples --no-goma'
          additional-raw-gn-args: |
            arm_cpu = "${{ matrix.arm-cpu }}"
            arm_tune = "${{ matrix.arm-tune }}"
      
      - name: Build engine (unoptimized, debug symbols)
        uses: ./.github/actions/build-engine
        if: ${{ matrix.unoptimized-nostripped == true }}
        with:
          ref: "${{ steps.engine-version-stable.outputs.hash  }}"
          is-host: false
          runtime-mode: ${{ matrix.runtime-mode }}
          os: linux
          cpu: ${{ matrix.cpu }}
          additional-gn-args: '--embedder-for-target --disable-desktop-embeddings --no-build-glfw-shell --no-build-embedder-examples --no-goma --unoptimized --no-stripped'
          additional-raw-gn-args: |
            arm_cpu = "${{ matrix.arm-cpu }}"
            arm_tune = "${{ matrix.arm-tune }}"
           
      - name: Upload artifacts (with gen_snapshot)
        if: ${{ matrix.has-gen-snapshot == true }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-${{ matrix.flavor }}
          path: |
            ${{ github.workspace }}/engine/src/out/build/compile_commands.json
            ${{ github.workspace }}/engine/src/out/build/libflutter_engine.so
            ${{ github.workspace }}/engine/src/out/build/icudtl.dat
            ${{ github.workspace }}/engine/src/out/build/flutter_embedder.h
            ${{ github.workspace }}/engine/src/out/build/clang_x64/gen_snapshot
      
      - name: Upload artifacts (without gen_snapshot)
        if: ${{ matrix.has-gen-snapshot == false }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-${{ matrix.flavor }}
          path: |
            ${{ github.workspace }}/engine/src/out/build/compile_commands.json
            ${{ github.workspace }}/engine/src/out/build/libflutter_engine.so
            ${{ github.workspace }}/engine/src/out/build/icudtl.dat
            ${{ github.workspace }}/engine/src/out/build/flutter_embedder.h
  
  package:
    name: 'Package artifacts'
    runs-on: ubuntu-latest
    needs: [build-engine]
    strategy:
      matrix:
        artifact-name:
          - pi4
          - pi4-64
          - armv7-generic
          - aarch64-generic
    steps:
      - uses: actions/checkout@v3
      
      - name: Read stable engine version
        id: engine-version-stable
        run: echo "hash=$(cat engine.version.stable | tr -dc [:xdigit:])" >> $GITHUB_OUTPUT
        
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-debug
          path: debug
      
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-debugdebug
          path: debugdebug
        
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-profile
          path: profile
        
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-release
          path: release
          
      - name: Package artifacts
        run: |
          mkdir -p pkg
          cd pkg
          cp ../engine.version.stable ./engine.version
          cp ../debug/libflutter_engine.so ./libflutter_engine.so.debug
          cp ../debugdebug/libflutter_engine.so ./libflutter_engine.so.debugdebug
          cp ../profile/libflutter_engine.so ./libflutter_engine.so.profile
          cp ../release/libflutter_engine.so ./libflutter_engine.so.release
          cp ../debug/flutter_embedder.h ./flutter_embedder.h
          cp ../debug/icudtl.dat ./icudtl.dat
          cp ../profile/clang_x64/gen_snapshot ./gen_snapshot_linux_x64_profile
          cp ../release/clang_x64/gen_snapshot ./gen_snapshot_linux_x64_release
          XZ_DEFAULTS="-T 0" tar -cJvf ../${{ matrix.artifact-name }}.tar.xz *
      
      # The github actions artifact uploader/downloader don't keep the file permissions, so we need to mak
      # the binaries executable again.
      # We tar the files afterwards though, which keeps the permissions.
      - name: Make binaries executable
        working-directory: pkg
        run: |
          chmod +x ./libflutter_engine.so* ./gen_snapshot*
      
      # Show the complete file tree, and print all metadata (permissions, owner, group, filesize, last modification date)
      - name: Show file tree
        run: |
          sudo apt-get install -y tree
          tree -apugshDF
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}
          path: |
            pkg/engine.version
            pkg/libflutter_engine.so.debug
            pkg/libflutter_engine.so.debugdebug
            pkg/libflutter_engine.so.profile
            pkg/libflutter_engine.so.release
            pkg/flutter_embedder.h
            pkg/icudtl.dat
            pkg/gen_snapshot_linux_x64_profile
            pkg/gen_snapshot_linux_x64_release
      
      - name: Upload artifacts (.tar.xz)
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-tar-xz
          path: |
            ${{ matrix.artifact-name }}.tar.xz
            
  build-app:
    name: 'Build test app'
    runs-on: ubuntu-latest
    needs: [package]
    strategy:
      matrix:
        artifact-name:
          - pi4
          - pi4-64
          - armv7-generic
          - aarch64-generic
        flavor:
          - debugdebug
          - debug
          - profile
          - release
        include:
          - flavor: debugdebug
            runtime-mode: debug
          - flavor: debug
            runtime-mode: debug
          - flavor: profile
            runtime-mode: profile
          - flavor: release
            runtime-mode: release
          
          - artifact-name: pi4
            arch: armv7
          - artifact-name: pi4-64
            arch: aarch64
          - artifact-name: armv7-generic
            arch: armv7
          - artifact-name: aarch64-generic
            arch: aarch64
    steps:
      - uses: actions/checkout@v3
      
      # TODO: Use the exact flutter version here
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
      
      - name: Determine flutter SDK path
        run: |
          echo "FLUTTER_SDK_PATH=$(dirname $(dirname $(which flutter)))" >> $GITHUB_ENV
      
      - name: Log flutter SDK path
        run: |
          echo flutter sdk path: $FLUTTER_SDK_PATH
           
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}
          path: binaries
      
      # Seems like this is necessary. Maybe it's not if we use a tar-file instead.
      - name: Make binaries executable
        working-directory: binaries
        run: |
          chmod +x ./libflutter_engine.so* ./gen_snapshot*
      
      # Show the complete file tree, and print all metadata (permissions, owner, group, filesize, last modification date)
      - name: Show file tree
        run: |
          sudo apt-get install -y tree
          tree -apugshDF
      
      - working-directory: test_app
        run: |
          flutter pub get
          flutter build bundle
          cp ../binaries/libflutter_engine.so.${{ matrix.flavor }} build/flutter_assets/libflutter_engine.so
          cp ../binaries/icudtl.dat build/flutter_assets/
      
      - name: Build kernel snapshot (profile)
        if: ${{ matrix.runtime-mode == 'profile' }}
        working-directory: test_app
        run: |
          $FLUTTER_SDK_PATH/bin/cache/dart-sdk/bin/dart \
            $FLUTTER_SDK_PATH/bin/cache/dart-sdk/bin/snapshots/frontend_server.dart.snapshot \
            --sdk-root $FLUTTER_SDK_PATH/bin/cache/artifacts/engine/common/flutter_patched_sdk \
            --target=flutter \
            --aot --tfa \
            -Ddart.vm.product=false \
            -Ddart.vm.profile=true \
            --packages .dart_tool/package_config.json \
            --output-dill build/kernel_snapshot.dill \
            --verbose \
            --depfile build/kernel_snapshot.d \
            package:test_app/main.dart
            
      - name: Build kernel snapshot (release)
        if: ${{ matrix.runtime-mode == 'release' }}
        working-directory: test_app
        run: |
          $FLUTTER_SDK_PATH/bin/cache/dart-sdk/bin/dart \
            $FLUTTER_SDK_PATH/bin/cache/dart-sdk/bin/snapshots/frontend_server.dart.snapshot \
            --sdk-root $FLUTTER_SDK_PATH/bin/cache/artifacts/engine/common/flutter_patched_sdk_product \
            --target=flutter \
            --aot --tfa \
            -Ddart.vm.product=true \
            -Ddart.vm.profile=false \
            --packages .dart_tool/package_config.json \
            --output-dill build/kernel_snapshot.dill \
            --verbose \
            --depfile build/kernel_snapshot.d \
            package:test_app/main.dart
      
      # Specify --sim-use-hardfp if we're building for armv7.
      - name: Build app.so (armv7)
        if: ${{ (matrix.runtime-mode == 'profile' || matrix.runtime-mode == 'release') && (matrix.arch == 'armv7') }}
        working-directory: test_app
        run: |
          ../binaries/gen_snapshot_linux_x64_${{ matrix.runtime-mode }} \
            --deterministic \
            --snapshot_kind=app-aot-elf \
            --elf=build/flutter_assets/app.so \
            --strip \
            --sim-use-hardfp \
            --verbose \
            build/kernel_snapshot.dill

      - name: Build app.so (aarch64)
        if: ${{ (matrix.runtime-mode == 'profile' || matrix.runtime-mode == 'release') && (matrix.arch == 'aarch64') }}
        working-directory: test_app
        run: |
          ../binaries/gen_snapshot_linux_x64_${{ matrix.runtime-mode }} \
            --deterministic \
            --snapshot_kind=app-aot-elf \
            --elf=build/flutter_assets/app.so \
            --strip \
            --verbose \
            build/kernel_snapshot.dill
            
      - name: Copy asset bundle
        run: |
          cp -r test_app/build/flutter_assets app-assets

      - name: Upload app assets
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-${{ matrix.flavor }}-app-assets
          path: app-assets
          
  test-app-pi4-32bit:
    name: 'Test app on a Raspberry Pi (32-bit)'
    runs-on: [ARM]
    needs: [build-app]
    strategy:
      matrix:
        artifact-name:
          - pi4
          - armv7-generic
        flavor:
          - debugdebug
          - debug
          - profile
          - release
        include:
          - flavor: debugdebug
            runtime-mode: debug
          - flavor: debug
            runtime-mode: debug
          - flavor: profile
            runtime-mode: profile
          - flavor: release
            runtime-mode: release
            
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-${{ matrix.flavor }}-app-assets
          path: app
      
      - uses: actions/checkout@v3
        with:
          repository: ardera/flutter-pi
          path: flutter-pi
      
      - name: Configure
        working-directory: flutter-pi
        run: |
          cmake -GNinja -DCMAKE_BUILD_TYPE=Debug -S. -Bbuild
      
      - name: Build
        working-directory: flutter-pi/build
        run: ninja
      
      # The app should quit with exit code 0 by itself.
      - name: Run app (debug)
        if: ${{ matrix.runtime-mode == 'debug' }}
        timeout-minutes: 3
        run: |
          flutter-pi/build/flutter-pi app
      
      - name: Run app (profile / release)
        if: ${{ matrix.runtime-mode == 'profile' || matrix.runtime-mode == 'release' }}
        timeout-minutes: 3
        run: |
          flutter-pi/build/flutter-pi --${{ matrix.runtime-mode }} app
  
  test-app-pi4-64bit:
    name: 'Test app on a Raspberry Pi (64-bit)'
    runs-on: [ARM64]
    needs: [build-app]
    strategy:
      matrix:
        artifact-name:
          - pi4-64
          - aarch64-generic
        flavor:
          - debugdebug
          - debug
          - profile
          - release
        include:
          - flavor: debugdebug
            runtime-mode: debug
          - flavor: debug
            runtime-mode: debug
          - flavor: profile
            runtime-mode: profile
          - flavor: release
            runtime-mode: release
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-${{ matrix.flavor }}-app-assets
          path: app
      
      - uses: actions/checkout@v3
        with:
          repository: ardera/flutter-pi
          path: flutter-pi
      
      - name: Configure
        working-directory: flutter-pi
        run: |
          cmake -GNinja -DCMAKE_BUILD_TYPE=Debug -S. -Bbuild
      
      - name: Build
        working-directory: flutter-pi/build
        run: ninja
      
      # The app should quit with exit code 0 by itself.
      - name: Run app (debug)
        if: ${{ matrix.runtime-mode == 'debug' }}
        timeout-minutes: 3
        run: |
          flutter-pi/build/flutter-pi app
      
      - name: Run app (profile / release)
        if: ${{ matrix.runtime-mode == 'profile' || matrix.runtime-mode == 'release' }}
        timeout-minutes: 3
        run: |
          flutter-pi/build/flutter-pi --${{ matrix.runtime-mode }} app
  
  release:
    name: 'Publish release'
    runs-on: ubuntu-latest
    needs: [package, test-app-pi4-32bit, test-app-pi4-64bit]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Read stable engine version
        id: engine-version-stable
        run: echo "hash=$(cat engine.version.stable | tr -dc [:xdigit:])" >> $GITHUB_OUTPUT

      - name: Log engine version
        run: |
          echo *** engine version: ***
          echo ${{ steps.engine-version-stable.outputs.hash }}
          
      - uses: actions/download-artifact@v3
        with:
          name: pi4-tar-xz
      
      - uses: actions/download-artifact@v3
        with:
          name: pi4-64-tar-xz
      
      - uses: actions/download-artifact@v3
        with:
          name: armv7-generic-tar-xz
      
      - uses: actions/download-artifact@v3
        with:
          name: aarch64-generic-tar-xz
      
      # Show the complete file tree, and print all metadata (permissions, owner, group, filesize, last modification date)
      - name: Show file tree
        run: |
          sudo apt-get install -y tree
          tree -apugshDF
      
      - uses: softprops/action-gh-release@v1
        with:
          body: |
            | name | info | reference |
            | - | - | - |
            | flutter channel | stable | |
            | flutter version | ${{ github.ref_name }} | [flutter/flutter@`${{ github.ref_name }}`](https://github.com/flutter/flutter/tree/${{ github.ref_name }}) |
            | engine commit | `${{ steps.engine-version-stable.outputs.hash }}` | https://github.com/flutter/engine/commit/${{ steps.engine-version-stable.outputs.hash }} |
          fail_on_unmatched_files: true
          files: |
            pi4.tar.xz
            pi4-64.tar.xz
            armv7-generic.tar.xz
            aarch64-generic.tar.xz
  
    
